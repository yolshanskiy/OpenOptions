// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BSMCall
double BSMCall(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMCall(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMCall(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMPut
double BSMPut(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMPut(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMPut(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMIVCall
double BSMIVCall(double OptionPrice, double S, double K, double r, double time, double q, double precision, double vol_initial);
RcppExport SEXP _OpenOptions_BSMIVCall(SEXP OptionPriceSEXP, SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP timeSEXP, SEXP qSEXP, SEXP precisionSEXP, SEXP vol_initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type OptionPrice(OptionPriceSEXP);
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< double >::type vol_initial(vol_initialSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMIVCall(OptionPrice, S, K, r, time, q, precision, vol_initial));
    return rcpp_result_gen;
END_RCPP
}
// BSMIVPut
double BSMIVPut(double OptionPrice, double S, double K, double r, double time, double q, double precision, double vol_initial);
RcppExport SEXP _OpenOptions_BSMIVPut(SEXP OptionPriceSEXP, SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP timeSEXP, SEXP qSEXP, SEXP precisionSEXP, SEXP vol_initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type OptionPrice(OptionPriceSEXP);
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< double >::type vol_initial(vol_initialSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMIVPut(OptionPrice, S, K, r, time, q, precision, vol_initial));
    return rcpp_result_gen;
END_RCPP
}
// BSMDeltaCall
double BSMDeltaCall(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMDeltaCall(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMDeltaCall(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMDeltaPut
double BSMDeltaPut(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMDeltaPut(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMDeltaPut(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMEpsilonCall
double BSMEpsilonCall(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMEpsilonCall(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMEpsilonCall(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMEpsilonPut
double BSMEpsilonPut(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMEpsilonPut(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMEpsilonPut(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMVega
double BSMVega(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMVega(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMVega(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMGamma
double BSMGamma(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMGamma(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMGamma(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMThetaCall
double BSMThetaCall(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMThetaCall(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMThetaCall(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMThetaPut
double BSMThetaPut(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMThetaPut(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMThetaPut(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMRhoCall
double BSMRhoCall(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMRhoCall(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMRhoCall(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMRhoPut
double BSMRhoPut(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMRhoPut(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMRhoPut(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMLambdaCall
double BSMLambdaCall(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMLambdaCall(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMLambdaCall(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMLambdaPut
double BSMLambdaPut(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMLambdaPut(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMLambdaPut(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMVanna
double BSMVanna(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMVanna(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMVanna(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMCharmCall
double BSMCharmCall(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMCharmCall(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMCharmCall(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// BSMCharmPut
double BSMCharmPut(double S, double K, double r, double vol, double time, double q);
RcppExport SEXP _OpenOptions_BSMCharmPut(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BSMCharmPut(S, K, r, vol, time, q));
    return rcpp_result_gen;
END_RCPP
}
// binomialStockPaths
Rcpp::List binomialStockPaths(double S, double K, double r, double vol, double time, double Div, int N, bool nonstandard_dividend_payment);
RcppExport SEXP _OpenOptions_binomialStockPaths(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP DivSEXP, SEXP NSEXP, SEXP nonstandard_dividend_paymentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type Div(DivSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type nonstandard_dividend_payment(nonstandard_dividend_paymentSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialStockPaths(S, K, r, vol, time, Div, N, nonstandard_dividend_payment));
    return rcpp_result_gen;
END_RCPP
}
// binomialStatePrices
NumericMatrix binomialStatePrices(double S, double K, double r, double vol, double time, double Div, int N, bool verbose, bool nonstandard_dividend_payment);
RcppExport SEXP _OpenOptions_binomialStatePrices(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP DivSEXP, SEXP NSEXP, SEXP verboseSEXP, SEXP nonstandard_dividend_paymentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type Div(DivSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type nonstandard_dividend_payment(nonstandard_dividend_paymentSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialStatePrices(S, K, r, vol, time, Div, N, verbose, nonstandard_dividend_payment));
    return rcpp_result_gen;
END_RCPP
}
// binomialOptionPricer
double binomialOptionPricer(double S, double K, double r, double vol, double time, double Div, int N, std::string type, bool verbose, bool nonstandard_dividend_payment);
RcppExport SEXP _OpenOptions_binomialOptionPricer(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP DivSEXP, SEXP NSEXP, SEXP typeSEXP, SEXP verboseSEXP, SEXP nonstandard_dividend_paymentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type Div(DivSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type nonstandard_dividend_payment(nonstandard_dividend_paymentSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialOptionPricer(S, K, r, vol, time, Div, N, type, verbose, nonstandard_dividend_payment));
    return rcpp_result_gen;
END_RCPP
}
// binomialOptionPricer_detailed
NumericMatrix binomialOptionPricer_detailed(double S, double K, double r, double vol, double time, double Div, int N, std::string type, bool verbose, bool nonstandard_dividend_payment);
RcppExport SEXP _OpenOptions_binomialOptionPricer_detailed(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP DivSEXP, SEXP NSEXP, SEXP typeSEXP, SEXP verboseSEXP, SEXP nonstandard_dividend_paymentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type Div(DivSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type nonstandard_dividend_payment(nonstandard_dividend_paymentSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialOptionPricer_detailed(S, K, r, vol, time, Div, N, type, verbose, nonstandard_dividend_payment));
    return rcpp_result_gen;
END_RCPP
}
// binomialOptionPricer_fast
double binomialOptionPricer_fast(double S, double K, double r, double vol, double time, double Div, int N, std::string type, bool verbose, bool nonstandard_dividend_payment, bool robust_warning);
RcppExport SEXP _OpenOptions_binomialOptionPricer_fast(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP DivSEXP, SEXP NSEXP, SEXP typeSEXP, SEXP verboseSEXP, SEXP nonstandard_dividend_paymentSEXP, SEXP robust_warningSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type Div(DivSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type nonstandard_dividend_payment(nonstandard_dividend_paymentSEXP);
    Rcpp::traits::input_parameter< bool >::type robust_warning(robust_warningSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialOptionPricer_fast(S, K, r, vol, time, Div, N, type, verbose, nonstandard_dividend_payment, robust_warning));
    return rcpp_result_gen;
END_RCPP
}
// binomialAmericanOptionPricer
double binomialAmericanOptionPricer(double S, double K, double r, double vol, double time, double Div, int N, std::string type, bool verbose, bool nonstandard_dividend_payment);
RcppExport SEXP _OpenOptions_binomialAmericanOptionPricer(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP DivSEXP, SEXP NSEXP, SEXP typeSEXP, SEXP verboseSEXP, SEXP nonstandard_dividend_paymentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type Div(DivSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type nonstandard_dividend_payment(nonstandard_dividend_paymentSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialAmericanOptionPricer(S, K, r, vol, time, Div, N, type, verbose, nonstandard_dividend_payment));
    return rcpp_result_gen;
END_RCPP
}
// binomialAmericanOptionPricer_detailed
Rcpp::List binomialAmericanOptionPricer_detailed(double S, double K, double r, double vol, double time, double Div, int N, std::string type, bool verbose, bool nonstandard_dividend_payment);
RcppExport SEXP _OpenOptions_binomialAmericanOptionPricer_detailed(SEXP SSEXP, SEXP KSEXP, SEXP rSEXP, SEXP volSEXP, SEXP timeSEXP, SEXP DivSEXP, SEXP NSEXP, SEXP typeSEXP, SEXP verboseSEXP, SEXP nonstandard_dividend_paymentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type Div(DivSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type nonstandard_dividend_payment(nonstandard_dividend_paymentSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialAmericanOptionPricer_detailed(S, K, r, vol, time, Div, N, type, verbose, nonstandard_dividend_payment));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OpenOptions_BSMCall", (DL_FUNC) &_OpenOptions_BSMCall, 6},
    {"_OpenOptions_BSMPut", (DL_FUNC) &_OpenOptions_BSMPut, 6},
    {"_OpenOptions_BSMIVCall", (DL_FUNC) &_OpenOptions_BSMIVCall, 8},
    {"_OpenOptions_BSMIVPut", (DL_FUNC) &_OpenOptions_BSMIVPut, 8},
    {"_OpenOptions_BSMDeltaCall", (DL_FUNC) &_OpenOptions_BSMDeltaCall, 6},
    {"_OpenOptions_BSMDeltaPut", (DL_FUNC) &_OpenOptions_BSMDeltaPut, 6},
    {"_OpenOptions_BSMEpsilonCall", (DL_FUNC) &_OpenOptions_BSMEpsilonCall, 6},
    {"_OpenOptions_BSMEpsilonPut", (DL_FUNC) &_OpenOptions_BSMEpsilonPut, 6},
    {"_OpenOptions_BSMVega", (DL_FUNC) &_OpenOptions_BSMVega, 6},
    {"_OpenOptions_BSMGamma", (DL_FUNC) &_OpenOptions_BSMGamma, 6},
    {"_OpenOptions_BSMThetaCall", (DL_FUNC) &_OpenOptions_BSMThetaCall, 6},
    {"_OpenOptions_BSMThetaPut", (DL_FUNC) &_OpenOptions_BSMThetaPut, 6},
    {"_OpenOptions_BSMRhoCall", (DL_FUNC) &_OpenOptions_BSMRhoCall, 6},
    {"_OpenOptions_BSMRhoPut", (DL_FUNC) &_OpenOptions_BSMRhoPut, 6},
    {"_OpenOptions_BSMLambdaCall", (DL_FUNC) &_OpenOptions_BSMLambdaCall, 6},
    {"_OpenOptions_BSMLambdaPut", (DL_FUNC) &_OpenOptions_BSMLambdaPut, 6},
    {"_OpenOptions_BSMVanna", (DL_FUNC) &_OpenOptions_BSMVanna, 6},
    {"_OpenOptions_BSMCharmCall", (DL_FUNC) &_OpenOptions_BSMCharmCall, 6},
    {"_OpenOptions_BSMCharmPut", (DL_FUNC) &_OpenOptions_BSMCharmPut, 6},
    {"_OpenOptions_binomialStockPaths", (DL_FUNC) &_OpenOptions_binomialStockPaths, 8},
    {"_OpenOptions_binomialStatePrices", (DL_FUNC) &_OpenOptions_binomialStatePrices, 9},
    {"_OpenOptions_binomialOptionPricer", (DL_FUNC) &_OpenOptions_binomialOptionPricer, 10},
    {"_OpenOptions_binomialOptionPricer_detailed", (DL_FUNC) &_OpenOptions_binomialOptionPricer_detailed, 10},
    {"_OpenOptions_binomialOptionPricer_fast", (DL_FUNC) &_OpenOptions_binomialOptionPricer_fast, 11},
    {"_OpenOptions_binomialAmericanOptionPricer", (DL_FUNC) &_OpenOptions_binomialAmericanOptionPricer, 10},
    {"_OpenOptions_binomialAmericanOptionPricer_detailed", (DL_FUNC) &_OpenOptions_binomialAmericanOptionPricer_detailed, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_OpenOptions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
